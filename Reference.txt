Reference (http://kubernetesbyexample.com/)
==========
https://kubernetes.io/blog/2015/06/the-distributed-system-toolkit-patterns/

Exam Tip:
=========
https://www.linkedin.com/pulse/my-ckad-exam-experience-atharva-chauthaiwale/
https://medium.com/@harioverhere/ckad-certified-kubernetes-application-developer-my-journey-3afb0901014

MiniKube Setup
=================
=================

Please find some links to Kubernetes Documentation Site below:

Kubernetes Documentation Site: https://kubernetes.io/docs/

Kubernetes Documentation Concepts: https://kubernetes.io/docs/concepts/

Kubernetes Documentation Setup: https://kubernetes.io/docs/setup/pick-right-solution/

Kubernetes Documentation - Minikube Setup: https://kubernetes.io/docs/getting-started-guides/minikube/




Setting Kubeadm:
================
=================
Oracle VirtualBox:  https://www.virtualbox.org/

Link to download VM images: http://osboxes.org/

Link to kubeadm installation instructions: https://kubernetes.io/docs/setup/independent/install-kubeadm/

To Assign Static IP in VirtuakBox: (Host-only network and disable DHCP)
=======================================================================
Go to GlobalTools, then select Virtual Host-only ethernet adapter. Make sure DHCP is not checked.
The go to each of the virtual machine:
Network > Adapter 1> Bridge
Network > Adapter 2 > Host-Only and select irtual Host-only ethernet adapter, created in 1st step.


To make ip address static:
==========================
Go to /etc/network/interfaces
Add lines:
auto eth0
iface eth0 inet static
       address 192.168.56.2
       netmask 255.255.255.0
Do same for master and worker nodes.

To Disable swap:
=================
swapoff -a 
vi /etc/fstab
Then comment the swap line.

Important Notice!! 
If you are following along with your own setup, make sure to use the below command for setting up Networking with Flannel. The command in the Kubernetes Documentation web site seems to be having an issue.
kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

Kubernetes Concepts - https://kubernetes.io/docs/concepts/

Pod Overview- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/

Some Useful Command:
===================
===================
To see Ip Address and Node of the pods, use command: kubectl getpods -o wide
To extract the definition to a file use: kubectl get pod <pod-name> -o yaml > pod-definition.yaml
To edit pod properties: kubectl edit pod <pod-name>

To extract the definition to a file use: kubectl get replicaset <rs-name> -o yaml > rs-definition.yaml
To scale replicaset: kubectl scale rs new-replicaset --replicas=5


Certification Tip:
=================
=================
1.Create an NGINX Pod
kubectl run --generator=run-pod/v1 nginx --image=nginx

2.Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml

3.Create a deployment
kubectl run --generator=deployment/v1beta1 nginx --image=nginx
Or the newer recommended way:
kubectl create deployment --image=nginx nginx

4.Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run -o yaml
Or
kubectl create deployment --image=nginx nginx --dry-run -o yaml

5.Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml
kubectl create deployment does not have a --replicas option. You could first create it and then scale it using the kubectl scale command.

6.Save it to a file - (If you need to modify or add some other details)
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml > nginx-deployment.yaml

7. Create a Service named nginx of type NodePort and expose it on port 30080 on the nodes:
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml

Example:
1. Deploy a redis pod using the redis:alpine image with the labels set to tier=db.
kubectl run --generator=run-pod/v1 redis --image=redis:alpine -l tier=db

2. Create a service redis-service to expose the redis application within the cluster on port 6379.
kubectl expose pod redis --port=6379 --name redis-service

3. Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas
Use the command kubectl create deployment webapp --image=kodekloud/webapp-color. The scale the webapp to 3 using command kubectl scale deployment/webapp --replicas=3

4. Expose the webapp as service webapp-service application on port 30082 on the nodes on the cluster.The web application listens on port 8080
Run the command, kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml to generate a service definition file. Then edit the nodeport in it and create a service.

Reference:
https://kubernetes.io/docs/reference/kubectl/conventions/

Namespaces Commands:
====================
====================
kubectl get namespace
kubectl get pods --namespace=research
kubectl run redis --image redis --namespace=finance

Which namespace has the 'blue' pod in it?
kubectl get pods --all-namespaces'


A quick note on editing PODs and Deployments
=============================================
=============================================
Remember, you CANNOT edit specifications of an existing POD other than the below.
a) spec.containers[*].image
b) spec.initContainers[*].image
c) spec.activeDeadlineSeconds
d) spec.tolerations
For example you cannot edit the environment variables, service accounts, resource limits (all of which we will discuss later) of a running pod. But if you really want to, you have 2 options:

1. Run the kubectl edit pod <pod name> command.  This will open the pod specification in an editor (vi editor). Then edit the required properties. When you try to save it, you will be denied. This is because you are attempting to edit a field on the pod that is not editable.
A copy of the file with your changes is saved in a temporary location as shown above.
You can then delete the existing pod by running the command:
kubectl delete pod webapp
Then create a new pod with your changes using the temporary file
kubectl create -f /tmp/kubectl-edit-ccvrq.yaml

2. The second option is to extract the pod definition in YAML format to a file using the command
kubectl get pod webapp -o yaml > my-new-pod.yaml
Then make the changes to the exported file using an editor (vi editor). Save the changes
vi my-new-pod.yaml
Then delete the existing pod
kubectl delete pod webapp
Then create a new pod with the edited file
kubectl create -f my-new-pod.yaml

Edit Deployments:
=================
With Deployments you can easily edit any field/property of the POD template. Since the pod template is a child of the deployment specification,  with every change the deployment will automatically delete and create a new pod with the new changes. So if you are asked to edit a property of a POD part of a deployment you may do that simply by running the command.
kubectl edit deployment my-deployment


Secrets Documentation:
=======================
https://kubernetes.io/docs/concepts/configuration/secret

1. Secrets are not encrypted, so it is not safer in that sense. However, some best practices around using secrets make it safer. As in best practices like:
Enabling Encryption at Rest for Secrets so they are stored encrypted in ETCD. 
https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/

2. Also the way kubernetes handles secrets. Such as:
A secret is only sent to a node if a pod on that node requires it.
Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.
Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.
https://kubernetes.io/docs/concepts/configuration/secret/#protections
https://kubernetes.io/docs/concepts/configuration/secret/#risks

3. Having said that, there are other better ways of handling sensitive data like passwords in Kubernetes, such as using tools like Helm Secrets, HashiCorp Vault.
https://www.vaultproject.io/

Security within Docker and Kubernetes:
=====================================
1. What is the user used to execute the sleep process within the 'ubuntu-sleeper' pod?
kubectl exec ubuntu-sleeper whoami

2. Try to run the below command in the pod 'ubuntu-sleeper' to set the date. Are you allowed to set date on the POD?
date -s '19 APR 2012 11:14:00'
kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'

https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


Sercice Accounts:
==================
1. How many Service Accounts exist in the default namespace?
kubectl get serviceaccounts

2. What is the secret token used by the default service account?
kubectl describe serviceaccount default

3. We just deployed the Dashboard application. Inspect the deployment. What is the image used by the deployment?
kubectl describe deployment

4. Inspect the Dashboard Application POD and identify the Service Account mounted on it.
Run command 'kubectl describe pod' and inspect serviceAccount

5. At what location is the ServiceAccount credentials available within the pod?
Run command 'kubectl describe pod' and look for volume mount path

6. The application needs a ServiceAccount with the Right permissions to be created to authenticate to Kubernetes. The 'default' ServiceAccount has limited access. Create a new ServiceAccount named 'dashboard-sa'.
Run command 'kubectl create serviceaccount dashboard-sa'

7. Retrieve the Authorization token for the newly created service account , copy it and paste it into the 'token' field of the UI
Run command 'kubectl describe secret <dashboard-sa-secret-name>' and get the token from the token field.

Resource Requirements:
======================
1. A pod named 'rabbit' is deployed. Identify the CPU requirements set on the Pod
Run the command 'kubectl describe pod rabbit' and inspect requests.

Taints And Toleration:
=======================
1. Do any taints exist on node01?
Run the command 'kubectl describe node node01' and see the taint property

2. Create a taint on node01 with key of 'spray', value of 'mortein' and effect of 'NoSchedule'
Run the command 'kubectl taint nodes node01 spray=mortein:NoSchedule'.

3. Create a new pod with the NGINX image, and Pod name as 'mosquito'
apiVersion: v1
kind: Pod
metadata:
  name: mosquito
spec:
  containers:
  - image: nginx
    name: mosquitomaster

4. Create another pod named 'bee' with the NGINX image, which has a toleration set to the taint Mortein
apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
  - image: nginx
    name: bee
  tolerations:
  - key: spray
    value: mortein
    effect: NoSchedule
    operator: Equalmaster

5. Do you see any taints on master node?
Run the command 'kubectl describe node master' and see the taint property.

6. Remove the taint on master, which currently has the taint effect of NoSchedule
Run the command 'kubectl taint nodes master node-role.kubernetes.io/master:NoSchedule-'.

7. Which node is the POD 'mosquito' on now?
Run the command 'kubectl get pods -o wide' and look at the Node column

Node Affinity:
==============
1. How many Labels exist on node node01?
Run the command 'kubectl describe node node01' and count the number of labels.

2. Apply a label color=blue to node node01
Run the command 'kubectl label node node01 color=blue'

3. Create a new deployment named 'blue' with the NGINX image and 6 replicas
Run the command 'kubectl run blue --image=nginx --replicas=6'

4. Set Node Affinity to the deployment to place the PODs on node01 only
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blue
spec:
  replicas: 6
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values:
                - blue

5. Create a new deployment named 'red' with the NGINX image and 3 replicas, and ensure it gets placed on the master node only.
Use the label - node-role.kubernetes.io/master - set on the master node.
apiVersion: extensions/v1beta1kind: Deployment
metadata:
  name: red
spec:
  replicas: 3
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
      affinity:
        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists

MultiContainer Pod:
===================
1. Create a multi-container pod with 2 containers.
apiVersion: v1
kind: Pod
metadata:
  name: yellow
spec:
  containers:  - name: lemon
    image: busybox

  - name: gold
    image: redismaster

2. The 'app'lication outputs logs to the file /log/app.log. View the logs and try to identify the user having issues with Login
Run the command 'kubectl exec -it app cat /log/app.log'

3. Edit the pod to add a sidecar container to send logs to ElasticSearch. Mount the log volume to the sidecar container..
apiVersion: v1
kind: Pod
metadata:
  name: app
  namespace: elastic-stack
  labels:
    name: app
spec:
  containers:
  - name: app
    image: kodekloud/event-simulator
    volumeMounts:
    - mountPath: /log
      name: log-volume
  - name: sidecar
    image: kodekloud/filebeat-configured
    volumeMounts:    
    - mountPath: /var/log/event-simulator/
      name: log-volume
  volumes:
  - name: log-volume
    hostPath:
      # directory location on host      
      path: /var/log/webapp
      # this field is optional      
      type: DirectoryOrCreatemaster

Readiness and Liveness:
======================

1. Sample script to test readiness.
master $ cat curl-test.sh
for i in {1..20}; do
   kubectl exec --namespace=kube-public curl -- sh -c 'test=`wget -qO- -T 2  http://webapp-service.default.svc.cluster.local:8080/ready 2>&1` && echo "$test OK" || echo "Failed"';
   echo ""

2. Sample crash script.
kubectl exec --namespace=kube-public curl -- wget -qO- http://webapp-service.default.svc.cluster.local:8080/crash

3. Sample freeze script.
nohup kubectl exec --namespace=kube-public curl -- wget -qO- http://webapp-service.default.svc.cluster.local:8080/freeze &
